
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLORleftLANDleftEENEleftLTGTLTEGTEleftPLUSMINUSleftASTERISKFSLASHrightUMINUSrightDEREFrightIF_BLOCKELSEDATA_TYPE IDENTIFIER CONSTANT EQUALS SEMICOLON ASTERISK AMPERSAND COMMA FSLASH PLUS MINUS LT GT LTE GTE EE NE PIPE IF ELSE WHILE LPAREN RPAREN LBRACE RBRACE NEWLINE VOID RETURNprogram : global_stmt_listglobal_stmt_list : empty\n\t\t| global_stmt global_stmt_listglobal_stmt : declaration\n\t\t| functionfunction : VOID function_var LPAREN paramlist RPAREN function_dummy LBRACE function_body RBRACE\n\t\t| DATA_TYPE function_var LPAREN paramlist RPAREN function_dummy LBRACE function_body RBRACE\n\t\t| DATA_TYPE function_var LPAREN paramlist RPAREN function_proto_dummy SEMICOLON\n\t\t| VOID function_var LPAREN paramlist RPAREN function_proto_dummy SEMICOLONfunction_var : IDENTIFIER\n\t\t| ASTERISK function_varparamlist : DATA_TYPE decl_var \n\t\t| paramlist COMMA DATA_TYPE decl_var\n\t\t| emptyfunction_body : statement_list return_statementreturn_statement : RETURN expression SEMICOLON\n\t\t| RETURN SEMICOLON\n\t\t| emptyfunction_dummy : emptyfunction_proto_dummy : emptystatement_list : statement_list statement\n\t\t| emptystatement : declaration\n\t\t| assignment\n\t\t| function_call SEMICOLON\n\t\t| while_block\n\t\t| if_else_blockstatement_block : statement\n\t\t| SEMICOLON\n\t\t| LBRACE statement_list RBRACEif_block : IF LPAREN condition RPAREN statement_blockelse_block : ELSE statement_blockif_else_block : if_block %prec IF_BLOCK\n\t\t| if_block else_blockwhile_block : WHILE LPAREN condition RPAREN statement_blockdeclaration : DATA_TYPE decl_var_list SEMICOLONdecl_var_list : decl_var \n\t\t| decl_var_list COMMA decl_vardecl_var : IDENTIFIER\n\t\t| ASTERISK decl_var %prec DEREFpointer_var : ASTERISK pointer_var\n\t\t| ASTERISK scalar_varscalar_var : IDENTIFIER\n\t\t| AMPERSAND IDENTIFIERassignment : pointer_var EQUALS expression SEMICOLON\n\t\t| IDENTIFIER EQUALS expression SEMICOLONexpression : expression PLUS expressionexpression : expression MINUS expressionexpression : LPAREN expression RPARENexpression : expression ASTERISK expressionexpression : expression FSLASH expressionexpression : MINUS expression %prec UMINUSexpression : function_callfunction_call : IDENTIFIER LPAREN arglist RPAREN\n\t\t| IDENTIFIER LPAREN RPAREN\n\t\t| ASTERISK function_callarglist : arglist COMMA expression\n\t\t| expressioncondition : expression EE expressioncondition : expression NE expressioncondition : expression LT expressioncondition : expression GT expressioncondition : expression LTE expressioncondition : expression GTE expressioncondition : condition AMPERSAND AMPERSAND condition %prec LANDcondition : condition PIPE PIPE condition %prec LORcondition : LPAREN condition RPARENexpression : CONSTANTexpression : pointer_var\n\t\t| scalar_varempty :'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,9,18,42,45,50,67,],[-71,0,-1,-2,-71,-4,-5,-3,-36,-8,-9,-7,-6,]),'DATA_TYPE':([0,4,5,6,18,20,23,33,41,42,44,45,47,48,50,52,55,56,58,59,65,67,78,86,87,105,106,107,108,115,116,121,130,131,134,143,144,],[7,7,-4,-5,-36,27,27,38,-71,-8,-71,-9,60,-22,-7,-21,-23,-24,-26,-27,-33,-6,-25,-34,60,-32,-28,-29,-71,-45,-46,60,60,60,-35,-30,-31,]),'VOID':([0,4,5,6,18,42,45,50,67,],[8,8,-4,-5,-36,-8,-9,-7,-6,]),'IDENTIFIER':([7,8,14,17,18,19,26,27,38,41,44,47,48,52,53,55,56,58,59,60,63,65,70,71,77,78,79,80,81,85,86,87,88,90,91,92,93,102,105,106,107,108,115,116,118,121,124,125,126,127,128,129,130,131,134,135,136,143,144,],[13,16,13,16,-36,25,25,25,25,-71,-71,62,-22,-21,76,-23,-24,-26,-27,25,76,-33,76,76,96,-25,76,76,76,76,-34,62,76,76,76,76,76,76,-32,-28,-29,-71,-45,-46,76,62,76,76,76,76,76,76,62,62,-35,76,76,-30,-31,]),'ASTERISK':([7,8,14,17,18,19,26,27,38,41,44,47,48,52,53,55,56,58,59,60,63,65,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98,100,101,102,104,105,106,107,108,110,111,112,113,114,115,116,117,118,120,121,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,],[14,17,14,17,-36,26,26,26,26,-71,-71,63,-22,-21,63,-23,-24,-26,-27,26,63,-33,92,63,63,-53,-68,-69,-70,-43,-25,63,63,63,-56,-41,-42,63,-34,63,63,63,63,63,63,-52,92,-44,92,92,-55,92,63,92,-32,-28,-29,-71,92,92,-50,-51,-49,-45,-46,-54,63,92,63,63,63,63,63,63,63,63,63,92,-35,63,63,92,92,92,92,92,92,-30,-31,]),'SEMICOLON':([10,12,13,22,24,25,32,34,36,37,40,53,57,68,72,73,74,75,76,82,83,84,87,94,96,97,98,100,110,111,112,113,114,117,121,131,],[18,-37,-39,-40,-38,-39,-71,-71,42,-20,45,69,78,89,-53,-68,-69,-70,-43,-56,-41,-42,107,-52,-44,115,116,-55,-47,-48,-50,-51,-49,-54,107,107,]),'COMMA':([10,12,13,20,22,23,24,25,28,29,30,31,43,72,73,74,75,76,82,83,84,94,96,99,100,101,110,111,112,113,114,117,132,],[19,-37,-39,-71,-40,-71,-38,-39,33,-14,33,-12,-13,-53,-68,-69,-70,-43,-56,-41,-42,-52,-44,118,-55,-58,-47,-48,-50,-51,-49,-54,-57,]),'LPAREN':([11,13,15,16,21,53,62,64,66,70,71,76,79,80,81,85,88,90,91,92,93,102,118,124,125,126,127,128,129,135,136,],[20,-10,23,-10,-11,71,81,85,88,71,71,81,71,71,71,102,102,71,71,71,71,102,71,71,71,71,71,71,71,102,102,]),'RETURN':([18,41,44,47,48,52,55,56,58,59,65,78,86,105,106,107,115,116,134,143,144,],[-36,-71,-71,53,-22,-21,-23,-24,-26,-27,-33,-25,-34,-32,-28,-29,-45,-46,-35,-30,-31,]),'WHILE':([18,41,44,47,48,52,55,56,58,59,65,78,86,87,105,106,107,108,115,116,121,130,131,134,143,144,],[-36,-71,-71,64,-22,-21,-23,-24,-26,-27,-33,-25,-34,64,-32,-28,-29,-71,-45,-46,64,64,64,-35,-30,-31,]),'IF':([18,41,44,47,48,52,55,56,58,59,65,78,86,87,105,106,107,108,115,116,121,130,131,134,143,144,],[-36,-71,-71,66,-22,-21,-23,-24,-26,-27,-33,-25,-34,66,-32,-28,-29,-71,-45,-46,66,66,66,-35,-30,-31,]),'RBRACE':([18,41,44,46,47,48,49,51,52,54,55,56,58,59,65,69,78,86,89,105,106,107,108,115,116,130,134,143,144,],[-36,-71,-71,50,-71,-22,67,-15,-21,-18,-23,-24,-26,-27,-33,-17,-25,-34,-16,-32,-28,-29,-71,-45,-46,143,-35,-30,-31,]),'ELSE':([18,55,56,58,59,65,78,86,105,106,107,115,116,134,143,144,],[-36,-23,-24,-26,-27,87,-25,-34,-32,-28,-29,-45,-46,-35,-30,-31,]),'RPAREN':([20,22,23,25,28,29,30,31,43,72,73,74,75,76,81,82,83,84,94,95,96,99,100,101,103,109,110,111,112,113,114,117,119,120,132,133,137,138,139,140,141,142,145,146,],[-71,-40,-71,-39,32,-14,34,-12,-13,-53,-68,-69,-70,-43,100,-56,-41,-42,-52,114,-44,117,-55,-58,121,131,-47,-48,-50,-51,-49,-54,133,114,-57,-67,-59,-60,-61,-62,-63,-64,-65,-66,]),'LBRACE':([32,34,35,37,39,87,121,131,],[-71,-71,41,-19,44,108,108,108,]),'MINUS':([53,68,70,71,72,73,74,75,76,79,80,81,82,83,84,85,88,90,91,92,93,94,95,96,97,98,100,101,102,104,110,111,112,113,114,117,118,120,124,125,126,127,128,129,132,135,136,137,138,139,140,141,142,],[70,91,70,70,-53,-68,-69,-70,-43,70,70,70,-56,-41,-42,70,70,70,70,70,70,-52,91,-44,91,91,-55,91,70,91,-47,-48,-50,-51,-49,-54,70,91,70,70,70,70,70,70,91,70,70,91,91,91,91,91,91,]),'CONSTANT':([53,70,71,79,80,81,85,88,90,91,92,93,102,118,124,125,126,127,128,129,135,136,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'AMPERSAND':([53,63,70,71,72,73,74,75,76,79,80,81,82,83,84,85,88,90,91,92,93,94,96,100,102,103,109,110,111,112,113,114,117,118,119,122,124,125,126,127,128,129,133,135,136,137,138,139,140,141,142,145,146,],[77,77,77,77,-53,-68,-69,-70,-43,77,77,77,-56,-41,-42,77,77,77,77,77,77,-52,-44,-55,77,122,122,-47,-48,-50,-51,-49,-54,77,122,135,77,77,77,77,77,77,-67,77,77,-59,-60,-61,-62,-63,-64,-65,-66,]),'EQUALS':([61,62,76,83,84,96,],[79,80,-43,-41,-42,-44,]),'PLUS':([68,72,73,74,75,76,82,83,84,94,95,96,97,98,100,101,104,110,111,112,113,114,117,120,132,137,138,139,140,141,142,],[90,-53,-68,-69,-70,-43,-56,-41,-42,-52,90,-44,90,90,-55,90,90,-47,-48,-50,-51,-49,-54,90,90,90,90,90,90,90,90,]),'FSLASH':([68,72,73,74,75,76,82,83,84,94,95,96,97,98,100,101,104,110,111,112,113,114,117,120,132,137,138,139,140,141,142,],[93,-53,-68,-69,-70,-43,-56,-41,-42,-52,93,-44,93,93,-55,93,93,93,93,-50,-51,-49,-54,93,93,93,93,93,93,93,93,]),'EE':([72,73,74,75,76,82,83,84,94,96,100,104,110,111,112,113,114,117,120,],[-53,-68,-69,-70,-43,-56,-41,-42,-52,-44,-55,124,-47,-48,-50,-51,-49,-54,124,]),'NE':([72,73,74,75,76,82,83,84,94,96,100,104,110,111,112,113,114,117,120,],[-53,-68,-69,-70,-43,-56,-41,-42,-52,-44,-55,125,-47,-48,-50,-51,-49,-54,125,]),'LT':([72,73,74,75,76,82,83,84,94,96,100,104,110,111,112,113,114,117,120,],[-53,-68,-69,-70,-43,-56,-41,-42,-52,-44,-55,126,-47,-48,-50,-51,-49,-54,126,]),'GT':([72,73,74,75,76,82,83,84,94,96,100,104,110,111,112,113,114,117,120,],[-53,-68,-69,-70,-43,-56,-41,-42,-52,-44,-55,127,-47,-48,-50,-51,-49,-54,127,]),'LTE':([72,73,74,75,76,82,83,84,94,96,100,104,110,111,112,113,114,117,120,],[-53,-68,-69,-70,-43,-56,-41,-42,-52,-44,-55,128,-47,-48,-50,-51,-49,-54,128,]),'GTE':([72,73,74,75,76,82,83,84,94,96,100,104,110,111,112,113,114,117,120,],[-53,-68,-69,-70,-43,-56,-41,-42,-52,-44,-55,129,-47,-48,-50,-51,-49,-54,129,]),'PIPE':([72,73,74,75,76,82,83,84,94,96,100,103,109,110,111,112,113,114,117,119,123,133,137,138,139,140,141,142,145,146,],[-53,-68,-69,-70,-43,-56,-41,-42,-52,-44,-55,123,123,-47,-48,-50,-51,-49,-54,123,136,-67,-59,-60,-61,-62,-63,-64,-65,-66,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_stmt_list':([0,4,],[2,9,]),'empty':([0,4,20,23,32,34,41,44,47,108,],[3,3,29,29,37,37,48,48,54,48,]),'global_stmt':([0,4,],[4,4,]),'declaration':([0,4,47,87,121,130,131,],[5,5,55,55,55,55,55,]),'function':([0,4,],[6,6,]),'decl_var_list':([7,60,],[10,10,]),'function_var':([7,8,14,17,],[11,15,21,21,]),'decl_var':([7,14,19,26,27,38,60,],[12,22,24,22,31,43,12,]),'paramlist':([20,23,],[28,30,]),'function_dummy':([32,34,],[35,39,]),'function_proto_dummy':([32,34,],[36,40,]),'function_body':([41,44,],[46,49,]),'statement_list':([41,44,108,],[47,47,130,]),'return_statement':([47,],[51,]),'statement':([47,87,121,130,131,],[52,106,106,52,106,]),'assignment':([47,87,121,130,131,],[56,56,56,56,56,]),'function_call':([47,53,63,70,71,79,80,81,85,87,88,90,91,92,93,102,118,121,124,125,126,127,128,129,130,131,135,136,],[57,72,82,72,72,72,72,72,72,57,72,72,72,72,72,72,72,57,72,72,72,72,72,72,57,57,72,72,]),'while_block':([47,87,121,130,131,],[58,58,58,58,58,]),'if_else_block':([47,87,121,130,131,],[59,59,59,59,59,]),'pointer_var':([47,53,63,70,71,79,80,81,85,87,88,90,91,92,93,102,118,121,124,125,126,127,128,129,130,131,135,136,],[61,74,83,74,74,74,74,74,74,61,74,74,74,74,74,74,74,61,74,74,74,74,74,74,61,61,74,74,]),'if_block':([47,87,121,130,131,],[65,65,65,65,65,]),'expression':([53,70,71,79,80,81,85,88,90,91,92,93,102,118,124,125,126,127,128,129,135,136,],[68,94,95,97,98,101,104,104,110,111,112,113,120,132,137,138,139,140,141,142,104,104,]),'scalar_var':([53,63,70,71,79,80,81,85,88,90,91,92,93,102,118,124,125,126,127,128,129,135,136,],[75,84,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'else_block':([65,],[86,]),'arglist':([81,],[99,]),'condition':([85,88,102,135,136,],[103,109,119,145,146,]),'statement_block':([87,121,131,],[105,134,144,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_stmt_list','program',1,'p_program','Parser.py',514),
  ('global_stmt_list -> empty','global_stmt_list',1,'p_global_stmt_list','Parser.py',519),
  ('global_stmt_list -> global_stmt global_stmt_list','global_stmt_list',2,'p_global_stmt_list','Parser.py',520),
  ('global_stmt -> declaration','global_stmt',1,'p_global_stmt','Parser.py',523),
  ('global_stmt -> function','global_stmt',1,'p_global_stmt','Parser.py',524),
  ('function -> VOID function_var LPAREN paramlist RPAREN function_dummy LBRACE function_body RBRACE','function',9,'p_function','Parser.py',528),
  ('function -> DATA_TYPE function_var LPAREN paramlist RPAREN function_dummy LBRACE function_body RBRACE','function',9,'p_function','Parser.py',529),
  ('function -> DATA_TYPE function_var LPAREN paramlist RPAREN function_proto_dummy SEMICOLON','function',7,'p_function','Parser.py',530),
  ('function -> VOID function_var LPAREN paramlist RPAREN function_proto_dummy SEMICOLON','function',7,'p_function','Parser.py',531),
  ('function_var -> IDENTIFIER','function_var',1,'p_function_var','Parser.py',567),
  ('function_var -> ASTERISK function_var','function_var',2,'p_function_var','Parser.py',568),
  ('paramlist -> DATA_TYPE decl_var','paramlist',2,'p_paramlist','Parser.py',575),
  ('paramlist -> paramlist COMMA DATA_TYPE decl_var','paramlist',4,'p_paramlist','Parser.py',576),
  ('paramlist -> empty','paramlist',1,'p_paramlist','Parser.py',577),
  ('function_body -> statement_list return_statement','function_body',2,'p_function_body','Parser.py',586),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','Parser.py',590),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','Parser.py',591),
  ('return_statement -> empty','return_statement',1,'p_return_statement','Parser.py',592),
  ('function_dummy -> empty','function_dummy',1,'p_function_dummy','Parser.py',606),
  ('function_proto_dummy -> empty','function_proto_dummy',1,'p_function_proto_dummy','Parser.py',656),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','Parser.py',670),
  ('statement_list -> empty','statement_list',1,'p_statement_list','Parser.py',671),
  ('statement -> declaration','statement',1,'p_statement','Parser.py',678),
  ('statement -> assignment','statement',1,'p_statement','Parser.py',679),
  ('statement -> function_call SEMICOLON','statement',2,'p_statement','Parser.py',680),
  ('statement -> while_block','statement',1,'p_statement','Parser.py',681),
  ('statement -> if_else_block','statement',1,'p_statement','Parser.py',682),
  ('statement_block -> statement','statement_block',1,'p_statement_block','Parser.py',691),
  ('statement_block -> SEMICOLON','statement_block',1,'p_statement_block','Parser.py',692),
  ('statement_block -> LBRACE statement_list RBRACE','statement_block',3,'p_statement_block','Parser.py',693),
  ('if_block -> IF LPAREN condition RPAREN statement_block','if_block',5,'p_if_block','Parser.py',703),
  ('else_block -> ELSE statement_block','else_block',2,'p_else_block','Parser.py',707),
  ('if_else_block -> if_block','if_else_block',1,'p_if_else_block','Parser.py',711),
  ('if_else_block -> if_block else_block','if_else_block',2,'p_if_else_block','Parser.py',712),
  ('while_block -> WHILE LPAREN condition RPAREN statement_block','while_block',5,'p_while_block','Parser.py',719),
  ('declaration -> DATA_TYPE decl_var_list SEMICOLON','declaration',3,'p_declaration','Parser.py',723),
  ('decl_var_list -> decl_var','decl_var_list',1,'p_decl_var_list','Parser.py',733),
  ('decl_var_list -> decl_var_list COMMA decl_var','decl_var_list',3,'p_decl_var_list','Parser.py',734),
  ('decl_var -> IDENTIFIER','decl_var',1,'p_decl_var','Parser.py',741),
  ('decl_var -> ASTERISK decl_var','decl_var',2,'p_decl_var','Parser.py',742),
  ('pointer_var -> ASTERISK pointer_var','pointer_var',2,'p_pointer_var','Parser.py',749),
  ('pointer_var -> ASTERISK scalar_var','pointer_var',2,'p_pointer_var','Parser.py',750),
  ('scalar_var -> IDENTIFIER','scalar_var',1,'p_scalar_var','Parser.py',757),
  ('scalar_var -> AMPERSAND IDENTIFIER','scalar_var',2,'p_scalar_var','Parser.py',758),
  ('assignment -> pointer_var EQUALS expression SEMICOLON','assignment',4,'p_assignment','Parser.py',781),
  ('assignment -> IDENTIFIER EQUALS expression SEMICOLON','assignment',4,'p_assignment','Parser.py',782),
  ('expression -> expression PLUS expression','expression',3,'p_expression_add','Parser.py',808),
  ('expression -> expression MINUS expression','expression',3,'p_expression_subtract','Parser.py',822),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parenthesis','Parser.py',836),
  ('expression -> expression ASTERISK expression','expression',3,'p_expression_multiply','Parser.py',840),
  ('expression -> expression FSLASH expression','expression',3,'p_expression_divide','Parser.py',854),
  ('expression -> MINUS expression','expression',2,'p_expression_negation','Parser.py',868),
  ('expression -> function_call','expression',1,'p_expression_function_call','Parser.py',879),
  ('function_call -> IDENTIFIER LPAREN arglist RPAREN','function_call',4,'p_function_call','Parser.py',883),
  ('function_call -> IDENTIFIER LPAREN RPAREN','function_call',3,'p_function_call','Parser.py',884),
  ('function_call -> ASTERISK function_call','function_call',2,'p_function_call','Parser.py',885),
  ('arglist -> arglist COMMA expression','arglist',3,'p_arglist','Parser.py',923),
  ('arglist -> expression','arglist',1,'p_arglist','Parser.py',924),
  ('condition -> expression EE expression','condition',3,'p_condition_ee','Parser.py',932),
  ('condition -> expression NE expression','condition',3,'p_condition_ne','Parser.py',946),
  ('condition -> expression LT expression','condition',3,'p_condition_lt','Parser.py',960),
  ('condition -> expression GT expression','condition',3,'p_condition_gt','Parser.py',974),
  ('condition -> expression LTE expression','condition',3,'p_condition_lte','Parser.py',988),
  ('condition -> expression GTE expression','condition',3,'p_condition_gte','Parser.py',1002),
  ('condition -> condition AMPERSAND AMPERSAND condition','condition',4,'p_condition_land','Parser.py',1016),
  ('condition -> condition PIPE PIPE condition','condition',4,'p_condition_lor','Parser.py',1030),
  ('condition -> LPAREN condition RPAREN','condition',3,'p_condition_parenthesis','Parser.py',1044),
  ('expression -> CONSTANT','expression',1,'p_expression_base_constant','Parser.py',1048),
  ('expression -> pointer_var','expression',1,'p_expression_base_var','Parser.py',1056),
  ('expression -> scalar_var','expression',1,'p_expression_base_var','Parser.py',1057),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',1065),
]
